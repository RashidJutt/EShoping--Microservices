using AutoMapper;using MediatR;using Microsoft.Extensions.Logging;using Ordering.Application.Commnads;using Ordering.Core.Entities;
using Ordering.Core.Repositories;namespace Ordering.Application.Handlers;public class CheckoutOrderCommandHandler : IRequestHandler<CheckoutOrderCommand, int>{    private readonly IOrderRepository _orderRepository;    private readonly IMapper _mapper;    private readonly ILogger<CheckoutOrderCommandHandler> _logger;    public CheckoutOrderCommandHandler(IOrderRepository orderRepository, IMapper mapper, ILogger<CheckoutOrderCommandHandler> logger)    {        _orderRepository = orderRepository;        _mapper = mapper;        _logger = logger;    }    public async Task<int> Handle(CheckoutOrderCommand request, CancellationToken cancellationToken)    {        var order = _mapper.Map<Order>(request);        var generatedOrder = await _orderRepository.AddAsync(order);

        _logger.LogInformation("Ordre ({OrderId}) is created", generatedOrder.Id);        return generatedOrder.Id;    }}